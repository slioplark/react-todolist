{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/Home.js","components/Login.js","actions/auth.js","constants/actionTypes.js","actions/profile.js","components/Header.js","reducers/auth.js","reducers/profile.js","reducers/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TodoItem","index","value","deleteTodo","useState","todo","setTodo","Input","fullWidth","onChange","e","target","startAdornment","Checkbox","color","endAdornment","InputAdornment","position","IconButton","onClick","useStyles","makeStyles","theme","root","minHeight","TodoList","classes","list","setList","i","tempList","filter","item","Card","className","CardHeader","title","CardContent","placeholder","map","key","Home","src","logo","alt","margin","spacing","Login","isLogged","useSelector","state","auth","dispatch","useDispatch","formik","useFormik","initialValues","lastName","firstName","fontSize","TextField","name","label","values","variant","handleChange","CardActions","Button","type","resetForm","payload","Header","profile","AppBar","Toolbar","Box","display","justifyContent","width","to","Typography","action","reducer","combineReducers","App","store","createStore","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5b663b57.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nconst TodoItem = ({ index, value, deleteTodo }) => {\n\n  const [todo, setTodo] = useState(value);\n\n  const updateTodo = (e) => {\n    setTodo(e.target.value);\n  }\n\n  return (\n    <Input\n      fullWidth\n      value={todo}\n      onChange={updateTodo}\n      startAdornment={\n        <Checkbox\n          color=\"primary\"\n        />\n      }\n      endAdornment={\n        <InputAdornment position=\"end\">\n          <IconButton\n            color=\"secondary\"\n            onClick={() => deleteTodo(index)}\n          >\n            <ClearIcon />\n          </IconButton>\n        </InputAdornment>\n      }\n    />\n  );\n\n};\n\nexport default TodoItem;","import React, { useState } from \"react\";\nimport TodoItem from './TodoItem';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport CardContent from '@material-ui/core/CardContent';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: '50vh',\n  }\n}));\n\nconst TodoList = () => {\n\n  const classes = useStyles();\n\n  const [todo, setTodo] = useState('');\n  const [list, setList] = useState([]);\n\n  const createTodo = (e) => {\n    setList([...list, todo]);\n    setTodo('');\n  }\n\n  const updateTodo = (e) => {\n    setTodo(e.target.value);\n  }\n\n  const deleteTodo = (i) => {\n    const tempList = list.filter((item, index) => index !== i);\n    setList(tempList);\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader title=\"Todo List\"></CardHeader>\n      <CardContent>\n        <Input\n          fullWidth\n          value={todo}\n          onChange={updateTodo}\n          placeholder=\"Add New Item\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton\n                color=\"primary\"\n                onClick={createTodo}\n              >\n                <AddIcon />\n              </IconButton>\n            </InputAdornment>\n          }\n        />\n        {\n          list.map((item, index) => (\n            <TodoItem\n              key={item}\n              value={item}\n              index={index}\n              deleteTodo={deleteTodo}\n            />\n          ))\n        }\n      </CardContent>\n    </Card>\n  );\n\n};\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport logo from '../logo.svg';\n\nconst Home = () => {\n  return (\n    <section>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <TodoList />\n    </section>\n  );\n};\n\nexport default Home;","import React from 'react';\nimport { useFormik } from 'formik';\nimport { login, logout } from '../actions/auth';\nimport { create, remove } from '../actions/profile';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport PersonIcon from '@material-ui/icons/Person';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1, 0),\n    },\n  }\n}));\n\nconst Login = () => {\n\n  const classes = useStyles();\n\n  const isLogged = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      lastName: '',\n      firstName: '',\n    }\n  });\n\n  const handleLogin = () => {\n    dispatch(login());\n    dispatch(create(formik.values));\n  }\n\n  const handleLogout = () => {\n    dispatch(logout());\n    dispatch(remove());\n    formik.resetForm({});\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <PersonIcon fontSize=\"large\" />\n        <TextField\n          fullWidth\n          name=\"lastName\"\n          label=\"Last Name\"\n          value={formik.values.lastName}\n          variant=\"outlined\"\n          onChange={formik.handleChange}\n        />\n        <TextField\n          fullWidth\n          name=\"firstName\"\n          label=\"First Name\"\n          value={formik.values.firstName}\n          variant=\"outlined\"\n          onChange={formik.handleChange}\n        />\n      </CardContent>\n      <CardActions>\n        {\n          isLogged\n            ? (\n              <Button\n                fullWidth\n                color=\"secondary\"\n                onClick={handleLogout}\n              >\n                Logout\n              </Button>\n            )\n            : (\n              <Button\n                fullWidth\n                color=\"primary\"\n                onClick={handleLogin}\n              >\n                Login\n              </Button>\n            )\n        }\n      </CardActions>\n    </Card>\n  );\n\n};\n\nexport default Login;","import { LOGIN, LOGOUT } from '../constants/actionTypes';\n\nexport const login = () => ({\n  type: LOGIN\n});\n\nexport const logout = () => ({\n  type: LOGOUT\n});","export const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const CREATE = 'CREATE';\nexport const REMOVE = 'REMOVE';","import { CREATE, REMOVE } from '../constants/actionTypes';\n\nexport const create = (formValue) => ({\n  type: CREATE,\n  payload: formValue\n});\n\nexport const remove = () => ({\n  type: REMOVE,\n});","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst Header = () => {\n  const profile = useSelector(state => state.profile);\n  const isLogged = useSelector(state => state.auth);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\n          <section>\n            <Link to=\"/\">\n              <Typography variant=\"h6\">\n                React Todolist\n              </Typography>\n            </Link>\n          </section>\n          <section>\n            <Link to=\"/\">\n              <Button color=\"inherit\">\n                Home\n              </Button>\n            </Link>\n            <Link to=\"/login\">\n              <Button color=\"inherit\">\n                {\n                  isLogged\n                    ? `${profile.lastName} ${profile.firstName}`\n                    : `Login`\n                }\n              </Button>\n            </Link>\n          </section>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;","import { LOGIN, LOGOUT } from '../constants/actionTypes';\n\nconst auth = (state = false, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return true;\n    case LOGOUT:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default auth;","import { CREATE, REMOVE } from '../constants/actionTypes';\n\nconst profile = (state = {}, action) => {\n  const payload = action.payload;\n\n  switch (action.type) {\n    case CREATE:\n      return {\n        lastName: payload.lastName,\n        firstName: payload.firstName,\n      };\n    case REMOVE:\n      return {\n        lastName: '',\n        firstName: '',\n      };\n    default:\n      return state;\n  }\n}\n\nexport default profile;","import { combineReducers } from \"redux\";\nimport auth from './auth';\nimport profile from './profile';\n\nconst reducer = combineReducers({\n  auth,\n  profile,\n});\n\nexport default reducer;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Header from './components/Header';\nimport reducer from './reducers';\nimport './App.css';\n\nfunction App() {\n  const store = createStore(reducer);\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/login\" component={Login} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}